part of '../../parser.dart';

/// Creates the [NotParser] parser.
NotParser not(Parser p) => NotParser(p);

/// The [NotParser] parser is a silent negative lookahead parser. It passilvely
/// invokes [p] and succeeds only if [p] does not parse successfully.
///
/// The [NotParser] parser will store the parsing state before invoking [p] and
/// will restore the state when [p] finishes parsing, this will remove all error
///  messages generated by the [p] parser.
///
/// Returns [null].
/// ```dart
/// final p = not(anyChar());
/// ```
class NotParser extends Parser {
  final Parser p;

  NotParser(this.p) {
    label = '!' + _quote(p);
  }

  @override
  bool fastParse(ParseState state) {
    final pos = state.pos;
    final r1 = p.fastParse(state);
    state.pos = pos;
    if (r1) {
      return false;
    }

    return true;
  }

  @override
  Tuple1? parse(ParseState state) {
    final pos = state.pos;
    final r1 = p.fastParse(state);
    state.pos = pos;
    if (!r1) {
      return const Tuple1(null);
    }
  }
}

extension NotParserExt on Parser {
  NotParser get not => NotParser(this);
}
