part of '../../parser.dart';

/// Creates the [AndParser] parser.
AndParser and(Parser p) => AndParser(p);

/// The [AndParser] parser is a silent positive lookahead parser. It invokes [p]
///  and succeeds only if [p] succeeds.
///
/// The [AndParser] parser will store the parsing state before invoking [p] and
/// will restore the state when [p] finishes parsing, this will remove all error
///  messages generated by the [p] parser.
///
/// Returns [null].
/// ```dart
/// final p = and(str('for'));
/// ```
class AndParser extends Parser {
  final Parser p;

  AndParser(this.p) {
    label = '&' + _quote(p);
    quote = false;
  }

  @override
  bool handleFastParse(ParseState state) {
    final ch = state.ch;
    final pos = state.pos;
    final r1 = p.fastParse(state);
    state.pos = pos;
    state.ch = ch;
    if (!r1) {
      return false;
    }

    return true;
  }

  @override
  Tuple1? handleParse(ParseState state) {
    final ch = state.ch;
    final pos = state.pos;
    final r1 = p.fastParse(state);
    state.pos = pos;
    state.ch = ch;
    if (r1) {
      return const Tuple1(null);
    }
  }
}

extension AndParserExt on Parser {
  /// Creates the [AndParser] parser.
  /// ```dart
  /// final p = str('foo').and;
  /// ```
  AndParser get and => AndParser(this);
}
